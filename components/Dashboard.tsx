import React from 'react';
import { AnalysisResult } from '../types';
import { Card, CardContent, CardHeader, CardTitle } from './ui/Card';

interface DashboardProps {
  analysisResult: AnalysisResult;
}

const InfoItem: React.FC<{ label: string; value?: string; description: string; children?: React.ReactNode }> = ({ label, value, description, children }) => (
    <div className="py-3 sm:py-4">
        <div className="flex items-center justify-between">
            <p className="text-sm font-medium text-slate-400 flex items-center">
                {label}
                <span className="group relative ml-2">
                    <span className="cursor-pointer" role="img" aria-label="Ï†ïÎ≥¥">‚ÑπÔ∏è</span>
                    <span className="absolute bottom-full mb-2 w-64 p-2 bg-slate-800 border border-slate-600 text-slate-200 text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-10">
                        {description}
                    </span>
                </span>
            </p>
            {value && <p className="text-sm font-semibold text-cyan-300 truncate">{value}</p>}
        </div>
        {children}
    </div>
);

const SecurityIndicator: React.FC<{ isSecure: boolean; text: string }> = ({ isSecure, text }) => (
  <span className={`flex items-center gap-1.5 px-2 py-1 text-xs font-medium rounded-full ${
    isSecure ? 'bg-green-800/50 text-green-300' : 'bg-yellow-800/50 text-yellow-300'
  }`}>
    <div className={`w-2 h-2 rounded-full ${isSecure ? 'bg-green-400' : 'bg-yellow-400'}`}></div>
    {text}
  </span>
);

const Dashboard: React.FC<DashboardProps> = ({ analysisResult }) => {
  const { geoData, traceData } = analysisResult;

  const isSecureHttp = traceData?.httpVersion?.startsWith('h3') || traceData?.httpVersion === 'http/2';
  const isSecureTls = traceData?.tlsVersion === 'TLSv1.3';
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 animate-fade-in">
        <Card>
            <CardHeader>
                <CardTitle><span className="mr-2 text-xl" role="img" aria-label="ID">üÜî</span>IP Ï†ïÎ≥¥</CardTitle>
            </CardHeader>
            <CardContent>
                <InfoItem
                    label="IP Ï£ºÏÜå"
                    value={geoData.query}
                    description="Î∂ÑÏÑùÎêú Í≥µÏö© Ïù∏ÌÑ∞ÎÑ∑ ÌîÑÎ°úÌÜ†ÏΩú(IP) Ï£ºÏÜåÏûÖÎãàÎã§."
                />
            </CardContent>
        </Card>

        <Card>
            <CardHeader>
                 <CardTitle><span className="mr-2 text-xl" role="img" aria-label="ÏßÄÍµ¨">üåç</span>ÏúÑÏπò Ï†ïÎ≥¥</CardTitle>
            </CardHeader>
            <CardContent>
                <InfoItem
                    label="Íµ≠Í∞Ä"
                    value={geoData.country ? `${geoData.country} (${geoData.countryCode})` : 'Ïïå Ïàò ÏóÜÏùå'}
                    description="IP Ï£ºÏÜåÏôÄ Ïó∞Í¥ÄÎêú Íµ≠Í∞ÄÏûÖÎãàÎã§. Ïù¥ Ï†ïÎ≥¥Îäî Ï∂îÏ†ïÏπòÏù¥Î©∞ Ìï≠ÏÉÅ Ï†ïÌôïÌïòÏßÄÎäî ÏïäÏùÑ Ïàò ÏûàÏäµÎãàÎã§."
                />
                 <InfoItem
                    label="ÎèÑÏãú"
                    value={geoData.city ? `${geoData.city}, ${geoData.regionName}`: 'Ïïå Ïàò ÏóÜÏùå'}
                    description="IP Ï£ºÏÜåÍ∞Ä Îì±Î°ùÎêú ÎèÑÏãú Î∞è ÏßÄÏó≠ Ï†ïÎ≥¥ÏûÖÎãàÎã§."
                />
            </CardContent>
        </Card>
        
        <Card>
            <CardHeader>
                <CardTitle><span className="mr-2 text-xl" role="img" aria-label="ÎÑ§Ìä∏ÏõåÌÅ¨">üåê</span>ISP Ï†ïÎ≥¥</CardTitle>
            </CardHeader>
            <CardContent>
                <InfoItem
                    label="ISP"
                    value={geoData.isp}
                    description="Ïù∏ÌÑ∞ÎÑ∑ ÏÑúÎπÑÏä§ Ï†úÍ≥µÏóÖÏ≤¥(ISP) Ï†ïÎ≥¥ÏûÖÎãàÎã§."
                />
                 <InfoItem
                    label="ÏÜåÏÜç Í∏∞Í¥Ä"
                    value={geoData.org}
                    description="IP Ï£ºÏÜåÎ•º ÏÜåÏú†ÌïòÍ≥† ÏûàÎäî Í∏∞Í¥Ä ÎòêÎäî ÌöåÏÇ¨ Ï†ïÎ≥¥ÏûÖÎãàÎã§."
                />
            </CardContent>
        </Card>

        {traceData && (
            <Card>
                <CardHeader>
                    <CardTitle><span className="mr-2 text-xl" role="img" aria-label="Î∞©Ìå®">üõ°Ô∏è</span>Ïó∞Í≤∞ Î≥¥Ïïà (ÎÇ¥ Ïó∞Í≤∞)</CardTitle>
                </CardHeader>
                <CardContent>
                    <InfoItem
                        label="HTTP Î≤ÑÏ†Ñ"
                        description="ÏÇ¨Ïö©Îêú ÌïòÏù¥ÌçºÌÖçÏä§Ìä∏ Ï†ÑÏÜ° ÌîÑÎ°úÌÜ†ÏΩúÏùò Î≤ÑÏ†ÑÏûÖÎãàÎã§. HTTP/2ÏôÄ H3Îäî Îçî Îπ†Î•¥Í≥† ÏïàÏ†ÑÌïú ÏµúÏã† ÌîÑÎ°úÌÜ†ÏΩúÏûÖÎãàÎã§."
                    >
                        <div className="flex justify-end mt-1">
                            <SecurityIndicator isSecure={!!isSecureHttp} text={traceData.httpVersion || 'Ïïå Ïàò ÏóÜÏùå'} />
                        </div>
                    </InfoItem>
                    <InfoItem
                        label="TLS Î≤ÑÏ†Ñ"
                        description="Ïó∞Í≤∞ÏùÑ ÏïîÌò∏ÌôîÌïòÎäî Îç∞ ÏÇ¨Ïö©Îêú Ï†ÑÏÜ° Í≥ÑÏ∏µ Î≥¥Ïïà(TLS)Ïùò Î≤ÑÏ†ÑÏûÖÎãàÎã§. TLS 1.3ÏùÄ Îçî ÎÇòÏùÄ Î≥¥ÏïàÍ≥º ÏÑ±Îä•ÏùÑ Ï†úÍ≥µÌïòÎäî ÏµúÏã† ÌëúÏ§ÄÏûÖÎãàÎã§."
                    >
                        <div className="flex justify-end mt-1">
                            <SecurityIndicator isSecure={!!isSecureTls} text={traceData.tlsVersion || 'Ïïå Ïàò ÏóÜÏùå'} />
                        </div>
                    </InfoItem>
                </CardContent>
            </Card>
        )}
    </div>
  );
};

export default Dashboard;